/*
 * Copyright (C) 2023 Igalia S.L
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * aint with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

// FIXME: Support Serializable and Transferable.
[
    ActiveDOMObject,
    Conditional=WEB_CODECS,
    EnabledBySetting=WebCodecsEnabled,
    Exposed=(Window,DedicatedWorker),
    InterfaceName=AudioDecoder,
] interface WebCodecsAudioDecoder : EventTarget {
    [CallWith=CurrentScriptExecutionContext] constructor(WebCodecsAudioDecoderInit init);

    readonly attribute WebCodecsCodecState state;
    readonly attribute unsigned long decodeQueueSize;
    attribute EventHandler ondequeue;

    [CallWith=CurrentScriptExecutionContext] undefined configure(WebCodecsAudioDecoderConfig config);
    undefined decode(WebCodecsEncodedAudioChunk chunk);
    Promise<undefined> flush();
    undefined reset();
    undefined close();

    [CallWith=CurrentScriptExecutionContext] static Promise<WebCodecsAudioDecoderSupport> isConfigSupported(WebCodecsAudioDecoderConfig config);
};

[
    Conditional=WEB_CODECS,
] dictionary WebCodecsAudioDecoderInit {
    required WebCodecsAudioDataOutputCallback output;
    required WebCodecsErrorCallback error;
};
